experiment <- data.frame(site = c("Site1", "Site1", "Site2", "Site2"),
date = c("Jan7", "Jan14", "Jan7", "Jan14"),
car_count = c(65, 40, 75, 45))
str(experiment) # Check structure of experiment data frame
experiment <- data.frame(site = c("Site1", "Site1", "Site2", "Site2"),
date = c("Jan7", "Jan14", "Jan7", "Jan14"),
car_count = c(65, 40, 75, 45))
str(experiment) # Check structure of experiment data frame
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge")
library(ggplot2)
experiment <- data.frame(site = c("Site1", "Site1", "Site2", "Site2"),
date = c("Jan7", "Jan14", "Jan7", "Jan14"),
car_count = c(65, 40, 75, 45))
str(experiment) # Check structure of experiment data frame
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Pastel1")
# 1.1 b) scale_fill_manual()
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_manual(values = c("red", "blue"))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_manual(values = c("red", "blue"), guide=FALSE) # add guide = FALSE
experiment <- data.frame(site = c("Exp1", "Exp1", "Exp2", "Exp2"),
date = c("Jan7", "Jan14", "Jan7", "Jan14"),
car_count = c(65, 40, 75, 45))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge", width = 0.5)
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", width = 0.5, position = position_dodge(0.8))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity") # Don't use position = "dodge"
experiment <- data.frame(site = c("Site1", "Site1", "Site2", "Site2"),
date = c("Jan7", "Jan14", "Jan7", "Jan14"),
car_count = c(65, 40, 75, 45))
str(experiment) # Check structure of experiment data frame
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Pastel1")
# 1.1 b) scale_fill_manual()
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_manual(values = c("red", "blue"))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_manual(values = c("red", "blue"), guide=FALSE) # add guide = FALSE
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge", width = 0.5)
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", width = 0.5, position = position_dodge(0.8))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity") # Don't use position = "dodge"
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = position_stack(reverse=TRUE)) +
guides(fill = guide_legend(reverse=TRUE))
# Lebel below the top
ggplot(data = experiment, mapping = aes(x=interaction(site, date), y=car_count)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), vjust= 1.5, colour = "white", size=5)
# Lebel above the top
ggplot(data = experiment, mapping = aes(x=interaction(site, date), y=car_count)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), vjust= -0.2, colour = "black", size=5)
ggplot(data = experiment, mapping = aes(x=interaction(site, date), y=car_count)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), vjust= -0.2, colour = "red", size=5) +
ylim(0, max(experiment$car_count)*1.1)
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
geom_text(aes(label=car_count), vjust= 1.5, colour = "white", size=5,
position = position_dodge(0.9))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), position = position_stack(vjust= 0.5),
colour = "white", size = 5)
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", colour = "black") + # add black outline
geom_text(aes(label=paste(format(car_count, nsmall=2), "kmph")),
position = position_stack(vjust= 0.5),
colour = "black", size = 5) +
scale_fill_brewer(palette = "Pastel1")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Pastel1")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge")
experiment
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Pastel1")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Pastel2")
# 1.1 b) scale_fill_manual()
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_manual(values = c("red", "blue"))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_manual(values = c("red", "blue"), guide=FALSE) # add guide = FALSE
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", width = 0.5, position = position_dodge(0.8))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = position_stack(reverse=TRUE)) +
guides(fill = guide_legend(reverse=TRUE))
# Lebel above the top
ggplot(data = experiment, mapping = aes(x=interaction(site, date), y=car_count)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), vjust= -0.2, colour = "black", size=5)
# Lebel below the top
ggplot(data = experiment, mapping = aes(x=interaction(site, date), y=car_count)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), vjust= 1.5, colour = "white", size=5)
# Lebel above the top
ggplot(data = experiment, mapping = aes(x=interaction(site, date), y=car_count)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), vjust= -0.2, colour = "black", size=5)
ggplot(data = experiment, mapping = aes(x=interaction(site, date), y=car_count)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), vjust= -0.2, colour = "red", size=5) +
ylim(0, max(experiment$car_count)*1.1)
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
geom_text(aes(label=car_count), vjust= 1.5, colour = "white", size=5,
position = position_dodge(0.9))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), position = position_stack(vjust= 0.5),
colour = "white", size = 5)
ggplot(data = experiment, mapping = aes(x=interaction(site, date), y=car_count)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), vjust= -0.2, colour = "red", size=5) +
ylim(0, max(experiment$car_count)*1.1)
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
geom_text(aes(label=car_count), vjust= 1.5, colour = "white", size=5,
position = position_dodge(0.9))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), position = position_stack(vjust= 0.5),
colour = "white", size = 5)
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", colour = "black") + # add black outline
geom_text(aes(label=paste(format(car_count, nsmall=2), "kmph")),
position = position_stack(vjust= 0.5),
colour = "black", size = 5) +
scale_fill_brewer(palette = "Pastel1")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_col()
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", colour = "black") + # add black outline
geom_text(aes(label=paste(format(car_count, nsmall=2), "cars")),
position = position_stack(vjust= 0.5),
colour = "black", size = 5) +
scale_fill_brewer(palette = "Pastel1")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", colour = "black") + # add black outline
geom_text(aes(label=paste(format(car_count, nsmall=0), "cars")),
position = position_stack(vjust= 0.5),
colour = "black", size = 5) +
scale_fill_brewer(palette = "Pastel1")
library(ggplot2)
experiment <- data.frame(site = c("Site1", "Site1", "Site2", "Site2"),
date = c("Jan7", "Jan14", "Jan7", "Jan14"),
car_count = c(65, 40, 75, 45))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", colour = "black") + # add black outline
geom_text(aes(label=paste(format(car_count, nsmall=0), "cars")),
position = position_stack(vjust= 0.5),
colour = "black", size = 5) +
theme_bw() +
scale_fill_brewer(palette = "Pastel1")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", colour = "black") + # add black outline
geom_text(aes(label=paste(format(car_count, nsmall=0), "cars")),
position = position_stack(vjust= 0.5),
colour = "black", size = 5) +
theme_classic() +
scale_fill_brewer(palette = "Pastel1")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", colour = "black", width = 0.5) + # add black outline
geom_text(aes(label=paste(format(car_count, nsmall=0), "cars")),
position = position_stack(vjust= 0.5),
colour = "black", size = 5) +
theme_classic() +
scale_fill_brewer(palette = "Pastel1")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", colour = "black", width = 0.6) + # add black outline
geom_text(aes(label=paste(format(car_count, nsmall=0), "cars")),
position = position_stack(vjust= 0.5),
colour = "black", size = 5) +
theme_classic() +
scale_fill_brewer(palette = "Pastel1")
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), position = position_stack(vjust= 0.5),
colour = "white", size = 5)
ggplot(data = experiment, mapping = aes(x=interaction(site, date), y=car_count)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), vjust= -0.2, colour = "red", size=5) +
ylim(0, max(experiment$car_count)*1.1)
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
geom_text(aes(label=car_count), vjust= 1.5, colour = "white", size=5,
position = position_dodge(0.9))
ggplot(data = experiment, mapping = aes(x=interaction(site, date), y=car_count)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), vjust= -0.2, colour = "red", size=5) +
ylim(0, max(experiment$car_count)*1.1)
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
geom_text(aes(label=car_count), vjust= 1.5, colour = "white", size=5,
position = position_dodge(0.9))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity") +
geom_text(aes(label=car_count), position = position_stack(vjust= 0.5),
colour = "white", size = 5)
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
geom_text(aes(label=car_count), vjust= 1.5, colour = "white", size=5,
position = position_dodge(0.9))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
geom_text(aes(label=car_count), vjust= -0.2, colour = "white", size=5,
position = position_dodge(0.9))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
geom_text(aes(label=car_count), vjust= -0.2, colour = "black", size=5,
position = position_dodge(0.9))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
geom_text(aes(label=car_count), vjust= -0.2, size=5,
position = position_dodge(0.9))
ggplot(data = experiment, mapping = aes(x=date, y=car_count, fill=site)) +
geom_bar(stat="identity", position = "dodge") +
geom_text(aes(label=car_count), vjust= -0.2, size=5,
position = position_dodge(0.9)) +
ylim(0, max(experiment$car_count)*1.1)
citation(ggplot2)
library(ggplot2)
citation(ggplot2)
citation()
citation(package = "base")
citation(package = "ggplot2")
library(mlbench)
library(rpart)
library(rpart.plot)
library(caret)
library(Metrics)
# load the diabetes dataset
data(PimaIndiansDiabetes2)
# Save data to Diabetes
Diabetes_raw <- na.omit(PimaIndiansDiabetes2) # Raw data
Diabetes <- na.omit(PimaIndiansDiabetes2) # Data for modeling
# Save data to Diabetes
Diabetes_raw <- na.omit(PimaIndiansDiabetes2) # Raw data
Diabetes <- na.omit(PimaIndiansDiabetes2) # Data for modeling
dplyr::glimpse(Diabetes)
set.seed(123)
index <- sample(2, nrow(Diabetes), prob = c(0.8, 0.2), replace = TRUE)
index
Diabetes_train <- Diabetes[index==1, ] # Train data
Diabetes_test <- Diabetes[index == 2, ] # Test data
names(Diabetes_train)
print(dim(Diabetes_train))
print(dim(Diabetes_test))
# Train a decision tree model
Diabetes_model <- rpart(formula = diabetes ~.,
data = Diabetes_train,
method = "class")
rpart.plot(x = Diabetes_model, yesno =2, type = 0, extra = 0)
# class prediction
class_predicted <- predict(object = Diabetes_model,
newdata = Diabetes_test,
type = "class")
confusionMatrix(data = class_predicted,
reference = Diabetes_test$diabetes)
accuracy(actual = class_predicted,
predicted = Diabetes_test$diabetes)
# Model training based on gini-based splitting criteria
Diabetes_model1 <- rpart(formula = diabetes ~ .,
data = Diabetes_train,
method = "class",
parms = list(split = "gini"))
# Model training based on information gain-based splitting criteria
Diabetes_model2 <- rpart(formula = diabetes ~ .,
data = Diabetes_train,
method = "class",
parms = list(split = "information"))
# Generate class predictions on the test data using gini-based splitting criteria
pred1 <- predict(object = Diabetes_model1,
newdata = Diabetes_test,
type = "class")
# Generate class predictions on test data using information gain based splitting criteria
pred2 <- predict(object = Diabetes_model2,
newdata = Diabetes_test,
type = "class")
# Compare classification accuracy on test data
accuracy(actual = Diabetes_test$diabetes,
predicted = pred1)
accuracy(actual = Diabetes_test$diabetes,
predicted = pred2)
rpart.plot(x = Diabetes_model1, yesno = 2, type = 0, extra = 0)
# Plotting Cost Parameter (CP) Table
plotcp(Diabetes_model1)
# Plotting the Cost Parameter (CP) Table
print(Diabetes_model1$cptable)
# Retrieve of optimal cp value based on cross-validated error
index <- which.min(Diabetes_model1$cptable[, "xerror"])
cp_optimal <- Diabetes_model1$cptable[index, "CP"]
cp_optimal
Diabetes_model1_opt <- prune(tree = Diabetes_model1, cp = cp_optimal)
rpart.plot(x = Diabetes_model1_opt, yesno = 2, type = 0, extra = 0)
pred3 <- predict(object = Diabetes_model1_opt,
newdata = Diabetes_test,
type = "class")
accuracy(actual = Diabetes_test$diabetes,
predicted = pred3)
## the minimum number of observations that must exist in a node in order for a split to be attempted.
## Set the maximum depth of any node of the final tree
minsplit <- seq(1, 20, 1)
maxdepth <- seq(1, 20, 1)
# Generate a search grid
hyperparam_grid <- expand.grid(minsplit = minsplit, maxdepth = maxdepth)
# Number of potential models in the grid
num_models <- nrow(hyperparam_grid)
# Create an empty list
diabetes_models <- list()
# Train a model and store in the list
diabetes_models[[i]] <- rpart(formula = diabetes ~ .,
data = Diabetes_train,
method = "class",
minsplit = minsplit,
maxdepth = maxdepth)
## the minimum number of observations that must exist in a node in order for a split to be attempted.
## Set the maximum depth of any node of the final tree
minsplit <- seq(1, 20, 1)
maxdepth <- seq(1, 20, 1)
# Generate a search grid
hyperparam_grid <- expand.grid(minsplit = minsplit, maxdepth = maxdepth)
# Number of potential models in the grid
num_models <- nrow(hyperparam_grid)
# Create an empty list
diabetes_models <- list()
# Write a loop over the rows of hyper_grid to train the grid of models
for (i in 1:num_models) {
minsplit <- hyperparam_grid$minsplit[i]
maxdepth <- hyperparam_grid$maxdepth[i]
# Train a model and store in the list
diabetes_models[[i]] <- rpart(formula = diabetes ~ .,
data = Diabetes_train,
method = "class",
minsplit = minsplit,
maxdepth = maxdepth)
}
# Let's check model 50
diabetes_models[[18]]
rpart.plot(x = diabetes_models[[18]], yesno = 2, type = 0, extra = 0)
rpart.plot(x = diabetes_models[[50]], yesno = 2, type = 0, extra = 0)
# Let's check model 50
diabetes_models[[50]]
rpart.plot(x = diabetes_models[[50]], yesno = 2, type = 0, extra = 0)
# Number of models inside the grid
num_models <- length(diabetes_models)
# Create an empty vector to store accuracy values
accuracy_values <- c()
# Generate predictions on test data
pred <- predict(object = model,
newdata = Diabetes_test,
type = "class")
# Use for loop for models accuracy estimation
for (i in 1:num_models) {
# Retrieve the model i from the list
model <- diabetes_models[[i]]
# Generate predictions on test data
pred <- predict(object = model,
newdata = Diabetes_test,
type = "class")
# Compute test accuracy and add to the empty vector accuracy_values
accuracy_values[i] <- accuracy(actual = Diabetes_test$diabetes,
predicted = pred)
}
# Identify the model with maximum accuracy
best_model <- diabetes_models[[which.max(accuracy_values)]]
# Print the model hyper-parameters of the best model
best_model$control
# Best_model accuracy on test data
pred <- predict(object = best_model,
newdata = Diabetes_test,
type = "class")
accuracy(actual = Diabetes_test$diabetes,
predicted = pred)
rpart.plot(x = best_model, yesno = 2, type = 0, extra = 0)
# load the diabetes dataset
data(PimaIndiansDiabetes2)
