library(mlbench)
library(rpart)
library(rpart.plot)
library(caret)
library(Metrics)
###############################################
## Diabetes prediction using classification tree
###############################################
# load Libraries
library(mlbench)
library(rpart)
library(rpart.plot)
library(caret)
library(Metrics)
# load the diabetes dataset
data(PimaIndiansDiabetes2)
##########################
# Details of the dataset
##########################
# pregnant:	 Number of times pregnant
# glucose:	 Plasma glucose concentration (glucose tolerance test)
# pressure:	 Diastolic blood pressure (mm Hg)
# triceps:	 Triceps skin fold thickness (mm)
# insulin:	 2-Hour serum insulin (mu U/ml)
# mass:	 Body mass index (weight in kg/(height in m)\^2)
# pedigree:	 Diabetes pedigree function
# age:	 Age (years)
# diabetes:	 Class variable (test for diabetes)
# Save data to Diabetes
Diabetes_raw <- na.omit(PimaIndiansDiabetes2) # Raw data
Diabetes <- na.omit(PimaIndiansDiabetes2) # Data for modeling
dplyr::glimpse(Diabetes)
#############################################
# Splitting to train (80%) and test (20%)
#############################################
set.seed(123)
index <- sample(2, nrow(Diabetes), prob = c(0.8, 0.2), replace = TRUE)
Diabetes_train <- Diabetes[index==1, ] # Train data
Diabetes_test <- Diabetes[index == 2, ] # Test data
names(Diabetes_train)
print(dim(Diabetes_train))
print(dim(Diabetes_test))
##########################################
# Training a tree model using rpart library
##########################################
# Train a decision tree model
Diabetes_model <- rpart(formula = diabetes ~.,
data = Diabetes_train,
method = "class")
rpart.plot(x = Diabetes_model, yesno = 1, type = 0, extra = 0)
rpart.plot(x = Diabetes_model, yesno =2, type = 0, extra = 0)
rpart.plot(x = Diabetes_model, yesno =1, type = 0, extra = 0)
rpart.plot(x = Diabetes_model, yesno =2, type = 0, extra = 0)
###############################################
## Diabetes prediction using classification tree
###############################################
# load Libraries
library(mlbench)
library(rpart)
library(rpart.plot)
library(caret)
library(Metrics)
# load the diabetes dataset
data(PimaIndiansDiabetes2)
##########################
# Details of the dataset
##########################
# pregnant:	 Number of times pregnant
# glucose:	 Plasma glucose concentration (glucose tolerance test)
# pressure:	 Diastolic blood pressure (mm Hg)
# triceps:	 Triceps skin fold thickness (mm)
# insulin:	 2-Hour serum insulin (mu U/ml)
# mass:	 Body mass index (weight in kg/(height in m)\^2)
# pedigree:	 Diabetes pedigree function
# age:	 Age (years)
# diabetes:	 Class variable (test for diabetes)
# Save data to Diabetes
Diabetes_raw <- na.omit(PimaIndiansDiabetes2) # Raw data
Diabetes <- na.omit(PimaIndiansDiabetes2) # Data for modeling
dplyr::glimpse(Diabetes)
#############################################
# Splitting to train (80%) and test (20%)
#############################################
set.seed(123)
index <- sample(2, nrow(Diabetes), prob = c(0.8, 0.2), replace = TRUE)
Diabetes_train <- Diabetes[index==1, ] # Train data
Diabetes_test <- Diabetes[index == 2, ] # Test data
names(Diabetes_train)
print(dim(Diabetes_train))
print(dim(Diabetes_test))
##########################################
# Training a tree model using rpart library
##########################################
# Train a decision tree model
Diabetes_model <- rpart(formula = diabetes ~.,
data = Diabetes_train,
method = "class")
##########################################
# Plotting the trained model
##########################################
rpart.plot(x = Diabetes_model, yesno =2, type = 0, extra = 0)
# class prediction
class_predicted <- predict(object = Diabetes_model,
newdata = Diabetes_test,
type = "class")
confusionMatrix(data = class_predicted,
reference = Diabetes_test$diabetes)
accuracy(actual = class_predicted,
predicted = Diabetes_test$diabetes)
# Model training based on gini-based splitting criteria
Diabetes_model1 <- rpart(formula = diabetes ~ .,
data = Diabetes_train,
method = "class",
parms = list(split = "gini"))
# Model training based on information gain-based splitting criteria
Diabetes_model2 <- rpart(formula = diabetes ~ .,
data = Diabetes_train,
method = "class",
parms = list(split = "information"))
# Generate class predictions on the test data using gini-based splitting criteria
pred1 <- predict(object = Diabetes_model1,
newdata = Diabetes_test,
type = "class")
# Generate class predictions on test data using information gain based splitting criteria
pred2 <- predict(object = Diabetes_model2,
newdata = Diabetes_test,
type = "class")
# Compare classification accuracy on test data
accuracy(actual = Diabetes_test$diabetes,
predicted = pred1)
accuracy(actual = Diabetes_test$diabetes,
predicted = pred2)
rpart.plot(x = Diabetes_model1, yesno = 2, type = 0, extra = 0)
# Plotting Cost Parameter (CP) Table
plotcp(Diabetes_model1)
# Plotting the Cost Parameter (CP) Table
print(Diabetes_model1$cptable)
# Retrieve of optimal cp value based on cross-validated error
index <- which.min(Diabetes_model1$cptable[, "xerror"])
cp_optimal <- Diabetes_model1$cptable[index, "CP"]
Diabetes_model1_opt <- prune(tree = Diabetes_model1, cp = cp_optimal)
rpart.plot(x = Diabetes_model1_opt, yesno = 2, type = 0, extra = 0)
