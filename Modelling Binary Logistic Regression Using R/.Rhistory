# Part 1: load Libraries
#############################
library(mlbench)     # for PimaIndiansDiabetes2 dataset
library(tidyverse)   # or specifically you can use ggplot2 library
# for plotting
library(broom)       # Make model summary tidy
library(caret)       # use to compute confusion matrix
library(visreg)      # For potting logodds and probabilitis
library(margins)     # Use to calculate Average Marginal Effects
library(rcompanion)  # Use to calculate pseudo R2
library(ROCR)        # Use to calculate Reciever Opering Curve
data(package = "mlbench")
data(PimaIndiansDiabetes2)
head(PimaIndiansDiabetes2)
glimpse(PimaIndiansDiabetes2)
Diabetes <- na.omit(PimaIndiansDiabetes2) # dataset for modeling
head(Diabetes)
glimpse(Diabetes)
levels(Diabetes$diabetes)
levels(Diabetes$diabetes) <- 0:1
levels(Diabetes$diabetes)
glimpse(Diabetes)
# Total number of rows in the credit data frame
n <- nrow(Diabetes)
# Number of rows for the training set (80% of the dataset)
n_train <- round(0.80 * n)
# Create a vector of indices which is an 80% random sample
set.seed(123)
train_indices <- sample(1:n, n_train)
# Subset the credit data frame to training indices only
train <- Diabetes[train_indices, ]
# Exclude the training indices to create the test set
test <- Diabetes[-train_indices, ]
paste("train sample size: ", dim(train)[1])
paste("test sample size: ", dim(test)[1])
model_logi <- glm(diabetes~., data = train, family = "binomial")
summary(model_logi) # see summary statistics
# Make data tidy using broom package
tidy(model_logi)
glance(model_logi) # Check model fitting
augment(model_logi) # obtain fitted values
(exp(coef(model_logi)))
tidy(model_logi, exponentiate = TRUE, conf.level = 0.95) # odd ratio
# Logodds of diabetes wrt to glucose level
visreg(model_logi, "glucose", xlab="Glucose level",
ylab="Log odds (diabetes)")
# Logodds of diabetes wrt to pedigree level
visreg(model_logi, "pedigree", xlab="pedigree level",
ylab="Log odds (diabetes)")
# Probabilities of diabetes wrt glucose
visreg(model_logi, "glucose", scale="response", rug=2, xlab="Glucose level",
ylab="P(diabetes)")
# Probabilities of diabetes wrt pedigree
visreg(model_logi, "pedigree", scale="response", rug=2, xlab="pedigree level",
ylab="P(diabetes)")
# Calculate average marginal effect
effects_logit_dia = margins(model_logi)
print(effects_logit_dia)
# Summary of marginal effect
summary(effects_logit_dia)
# Plot marginal effect
plot(effects_logit_dia)
effects_logit_diab = summary(effects_logit_dia)
ggplot(data = effects_logit_diab) +
geom_point(mapping = aes(x = factor, y = AME)) +
geom_errorbar(mapping = aes(x = factor, ymin = lower, ymax = upper)) +
geom_hline(yintercept = 0) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
pred <- predict(model_logi, test, type="response") # predict using test data
head(pred)
predicted <- round(pred) # round of the value; >0.5 will convert to 1
head(predicted)          # else 0
head(data.frame(observed = test$diabetes, predicted = predicted))
tab <- table(Predicted = predicted, Reference = test$diabetes)
tab
sum(diag(tab))/sum(tab)*100
confusionMatrix(tab)
library(yardstick)
act_pred <- data.frame(observed = test$diabetes, predicted = factor(predicted))
str(act_pred)
accuracy_est <- accuracy(act_pred, observed, predicted)
prec <- precision(act_pred, observed, predicted)
rec <- recall(act_pred, observed, predicted)
F1_score <- f_meas(act_pred, observed, predicted)
print(accuracy_est)
print(prec)
print(rec)
print(F1_score)
nagelkerke(model_logi)
pred.rocr <- prediction(pred, test$diabetes)
eval <- performance(pred.rocr, "acc")
plot(eval)
max <- which.max(slot(eval, "y.values")[[1]])
acc <- slot(eval, "y.values")[[1]][max] #y.values are accuracy measures
cut <- slot(eval, "x.values")[[1]][max] # x.values are cutoff measures
print(c(Accuracy = acc, Cutoff = cut))
perf_rocr <- performance(pred.rocr, measure = "auc",
x.measure = "cutoff")
perf_rocr@y.values[[1]] <- round(perf_rocr@y.values[[1]], digits = 4)
perf.tpr.fpr.rocr <- performance(pred.rocr, "tpr", "fpr")
plot(perf.tpr.fpr.rocr, colorize=T,
main = paste("AUC:", (perf_rocr@y.values)))
abline(a = 0, b = 1)
